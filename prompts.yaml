overview:
  load_context:
    - project_info
    - website_intention
  prompt: |
    - Discern what is the topic of focus from this project information.
    - Generate a concise and detailed overview of the topic.
    - Given the project information and website intention, generate an overview of the website to be built.
    - This overview will be used as a source of truth to guide the style and structure of the website.

    Output as a markdown file.
  save_context: overview
  save_file: "guides/overview.md"
style_guide:
  load_context:
    - overview
    - project_info
  prompt: |
    Generate a comprehensive style guide that includes:
        1. Core Message (3 sentences maximum)
        * Primary purpose/mission
        * Target audience
        * Key differentiator
        2. Thematic Elements (up to 5)
        * List key conceptual themes
        * Associated imagery/motifs
        * Emotional resonance
        3. Design Direction
        * Overall aesthetic (e.g., minimal, organic, technical)
        * Typography characteristics
        * Visual hierarchy principles
        * Spacing/whitespace philosophy
        * UI component personality
        4. Color Palette
        * Primary color with hex code
        * Secondary color with hex code
        * Accent color with hex code
        * Two neutral tones with hex codes
        * Contextual use guidelines

        From this style guide, we will be generating a main.css file, a theme.js file, and partials for the header and footer.
        It's important that the information is concise, specific, and accurate, and that it can be used to generate the above files.

        Format output as a structured markdown file that can serve as a single source of truth for both messaging and visual design decisions.

  save_context: style_guide
  save_file: "guides/style_guide.md"
structure_guide:
  load_context:
    - overview
    - website_intention
  prompt: |
    Using the provided project information, generate a concise site structure document in yaml.
    It should include a list of page names and then describe the page title and description.
    The format will look like this:
    pages:
      index:
        title: "Home"
        description: "The home page of the website."
      about:
        title: "About"
        description: "Information about the project and the team."
  save_context: structure_guide
  save_file: "guides/structure_guide.yaml"
config:
  load_context:
    - website_intention
    - overview
  prompt: |
    Generate a hugo.toml file with the following information:
    title: "Website Title"
    languageCode: "en-us"
    baseURL: "https://example.org/"
  save_context: config
  save_file: "hugo.toml"
themejs:
  load_context:
    - style_guide
  prompt: |
    Generate a theme.js file with tailwind config for hugo based on:
    1. The exact color codes from the style guide
    2. The typography specifications
    3. Custom spacing values
    4. Responsive breakpoints
    5. Any custom animations or transitions

    Make sure it starts with tailwind.config and not module.exports.

    It should look like this while containing more information:
    tailwind.config = {
      content: ["./content/**/*.{html,js,md}", "./layouts/**/*.{html,js}"],
      theme: {
        extend: {
          colors: {
    
    Ensure all color variables are properly named according to their functional use in the style guide.
  save_context: themejs
  save_file: "static/js/theme.js"
maincss:
  load_context:
    - style_guide
    - themejs
  prompt: |
    Generate a main.css file with tailwind config for use in hugo.
    It should incorporate the variables set in theme.js.
    This should include a css file and nothing else.
    Don't add any extra formatting like ```css```.
    It should look like this while containing more information:
      @tailwind base;
      @tailwind components;
      @tailwind utilities;
  save_context: maincss
  save_file: "static/css/main.css"
header:
  load_context:
    - overview
    - website_intention
    - style_guide
    - structure_guide
    - themejs
    - maincss
  prompt: |
    Using the provided style guide, structure guide, and main.css, generate a header.html partial for hugo.
    Don't add any extra formatting like ```html```.
    Be careful with the background and text colors, they should match the style guide, be consistent, and not clash.
    It should look like this while containing more information:
      <header class="bg-primary text-primary"></header>
      <nav class="container mx-auto px-4 py-6">
        <div class="flex justify-between items-center">
          <a href="/" class="text-xl font-bold">{{ .Site.Title }}</a>
        </div>
      </nav>
  save_context: header
  save_file: "layouts/partials/header.html"
footer:
  load_context:
    - overview
    - website_intention
    - style_guide
    - structure_guide
    - maincss
    - themejs
  prompt: |
    Using the provided structure guide, generate a footer.html partial for hugo.
    Don't add any extra formatting like ```html```.
    Be careful with the background and text colors, they should match the style guide, be consistent, and not clash.
    It should look like this while containing more information:
      <footer class="bg-gray-800 text-white"></footer>
  save_context: footer
  save_file: "layouts/partials/footer.html"
page_guide:
  load_context:
    - structure_guide
    - overview
  prompt: |
    Using the provided structure guide and overview, generate a guide for the given page.
    This should detail the structure of the page and what content should be included.
    Using only this guide, a future prompt should be able to generate the page layout and content.
    It should go into detail about the various variables that will be used in the page layout and content.

    Format the output as a markdown file.
page_layout:
  load_context:
    - maincss
    - themejs
    - style_guide
    - structure_guide
  prompt: |
    Using the provided page guide, generate a page layout for hugo.
    Don't add any extra formatting like ```html```.
    It should look like this while containing more information:
      {{ define "main" }}
      {{ .Content }}
      {{ end }}
page_content:
  load_context:
  prompt: |
    Using the provided page guide, generate a page markdown content for hugo.
    Ensure that it is formatted correctly for hugo and to work with the provided layout file.
    Keep it simple, don't add extra variables inside of here, only define the ones listed in the guide.
    The type should match the page name (i.e. index, about, etc...)
    It should look like this while containing more information:
      ---
      title: "Home"
      date: 2024-01-01
      type: "index"
      ---
      {{ .Content }}